buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://repo.spongepowered.org/maven" }
        maven { url "https://files.minecraftforge.net/maven" }
    }
    dependencies {
        classpath group: "org.spongepowered", name: "mixingradle", version: "0.7-SNAPSHOT", changing: true
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "4.1.+", changing: true
    }
}

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "maven-publish"
apply plugin: "eclipse"

group = "com.terraforged"
version = "${minecraft_version}-${mod_version}${getClassifier()}"
sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

allprojects {
    apply plugin: "java"
}

configurations {
    lib
    compile.extendsFrom lib
}

repositories {
    maven { url "https://io.terraforged.com/maven/" }
    mavenCentral()
    jcenter()
}

// If building from source
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    annotationProcessor "org.spongepowered:mixin:0.8.2:processor"
//    lib "com.terraforged:Engine:0.2.3"
    lib project(":Engine")
}

sourceSets {
    main.java {
        srcDirs += "FeatureManager/src/main/java"
    }
    main.resources {
        srcDirs += "DataGen/resources/"
        srcDirs += "FeatureManager/src/main/resources"
        exclude ".cache"
    }
}

mixin {
    add sourceSets.main, "mixin.terraforged.refmap.json"
}

minecraft {
    mappings channel: mcp_channel, version: mcp_version
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")
    runs {
        client {
            workingDirectory project.file("run/client")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            jvmArgs "-Xmx8G", "-Xms6G", "-Ddev", "-Dfml.earlyprogresswindow=false"
            arg "-mixin.config=mixin.terraforged.json"
            mods {
                terraforged {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file("run/server")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            jvmArgs "-Xmx8G", "-Xms6G", "-Ddev", "-DvanillaBiomes"
            arg "-mixin.config=mixin.terraforged.json"
            mods {
                terraforged {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file("run/data")
            property "forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP"
            property "forge.logging.console.level", "debug"
            property "fml.earlyprogresswindow", "false"
            args "--mod", "terraforged", "--server", "--output", file("DataGen/resources/")
            jvmArgs "-Xmx4G", "-Xms2G"
            mods {
                terraforged {
                    source sourceSets.main
                }
            }
        }
    }
}

task collectLibs(type: Copy) {
    // require upstream projects to be jar'd first
    dependsOn(dependsOn: subprojects.tasks["jar"])

    // copy contents to build dir ignoring dupes
    from { configurations.lib.collect { it.isDirectory() ? it : zipTree(it) } }
    into("build/classes/java/main")
    duplicatesStrategy = "EXCLUDE"
}

processResources {
    filesMatching("**/mods.toml") {
        // replaces the version string in the mods.toml
        expand("version": "${mod_version}${getClassifier()}", "mc_version": minecraft_version)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

classes {
    // collect all dependency classes first
    dependsOn(collectLibs)
}

jar {
    duplicatesStrategy = "EXCLUDE"
    manifest {
        attributes([
                "Specification-Title": "TerraForged",
                "Specification-Vendor": "TerraForged",
                "Specification-Version": "1",
                "Implementation-Title": project.name,
                "Implementation-Version": "${version}",
                "Implementation-Vendor" :"TerraForged",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs": "mixin.terraforged.json"
        ])
    }
}

import net.minecraftforge.gradle.common.task.SignJar
task signJar(type: SignJar, dependsOn: "reobfJar") {
    onlyIf { project.hasProperty("signing.keystore.path") }
    keyStore = project.findProperty("signing.keystore.path")
    storePass = project.findProperty("signing.keystore.pass")
    alias = project.findProperty("signing.key.name")
    keyPass = project.findProperty("signing.key.pass")
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

build {
    dependsOn("signJar")
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    if (System.getenv("MAVEN_USER") != null && System.getenv("MAVEN_PASS") != null) {
        repositories {
            maven {
                url = "https://io.terraforged.com/maven/"
                credentials {
                    username System.getenv("MAVEN_USER")
                    password System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}

def getClassifier() {
    def classifier = ""
    if (System.getenv("GIT_TAG_NAME") == null) {
        if (!mod_classifier.isEmpty()) {
            classifier += "-${mod_classifier}"
        }
    } else {
        // Append development version (ALPHA/BETA/RC-#)
        if (!dev_version.isEmpty()) {
            classifier += "-${dev_version}"
        }

        // Append build number if on CI server
        def buildNumber = System.getenv("BUILD_NUMBER")
        if (buildNumber != null) {
            classifier += "-${buildNumber}"
        }
    }
    return classifier
}